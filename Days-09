/**************160. Intersection of Two Linked Lists ******************/

Given the heads of two singly linked-lists headA and headB, return the node at which the two
lists intersect. If the two linked lists have no intersection at all, return null.


/-------------------MOST OPTIMAL SOLUTION IN C++---------------------------/

class Solution {
public:
    int getLength(ListNode* head)
    {
        if(head == NULL)
        {
            return 0;
        }
        int cnt = 0;
        ListNode* curr = head;
        while(curr != NULL)
        {
            cnt++;
            curr=curr->next;
        }
        return cnt;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA = getLength(headA);
        int lenB = getLength(headB);

        while(lenA > lenB)
        {
            lenA--;
            headA = headA->next;
        }
        while(lenB > lenA)
        {
            lenB--;
            headB=headB->next;
        }
        while(headA != headB)
        {
            headA = headA->next;
            headB = headB->next;
        }
        return headA;
    }
};
